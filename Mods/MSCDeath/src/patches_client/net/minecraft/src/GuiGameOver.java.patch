--- a/net/minecraft/src/GuiGameOver.java
+++ b/net/minecraft/src/GuiGameOver.java
@@ -1,49 +1,252 @@
 package net.minecraft.src;
 
+import java.io.File;
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.nio.file.StandardCopyOption;
+
+import org.lwjgl.BufferUtils;
 import org.lwjgl.opengl.GL11;
 
+import net.minecraft.client.Minecraft;
+
 public class GuiGameOver extends GuiScreen {
+	private static final int IMG_WIDTH = 181;
+	private static final int IMG_HEIGHT = 239;
+	private static final float SCALE_MAX = 1.0F;
+	private boolean playedMusic;
+	private int noRenderTicks = 50;
+	private int blankScreenTicks = 25;
+	private int musicPauseTicks = 18;
+	private float scale;
+	private float rotation = 275.0F;
+	private int texture = -1;
+	private int respawnTicks = -1;
+
+	private void extractDeathMusic() {
+		try {
+			if (this.mc.sndManager.isMusicRegistered("random.death")) {
+				return;
+			}
+			System.out.println("Registering death music...");
+			File file = new File("death.ogg");
+			InputStream data = Minecraft.class.getResourceAsStream("/death.ogg");
+			Files.copy(data, Paths.get(file.toURI()), StandardCopyOption.REPLACE_EXISTING);
+			data.close();
+			this.mc.sndManager.addMusic("random/death.ogg", file);
+		} catch (Exception ex) {
+			ex.printStackTrace();
+		}
+	}
+	
+	private static ByteBuffer resizeTexBuffer(ByteBuffer input, int orgWidth, 
+			int orgHeight, int width, int height) {
+	    ByteBuffer buffer = BufferUtils.createByteBuffer(width * height * 3);
+	    
+	    for (int y = 0; y < height; y++) {
+	        for (int x = 0; x < width; x++) {
+	            int oldX = x * orgWidth / width;
+	            int oldY = y * orgHeight / height;
+	            
+	            for (int i = 0; i < 3; i++) {
+	                buffer.put(input.get((oldY * orgWidth + oldX) * 3 + i));
+	            }
+	        }
+	    }
+	    
+	    buffer.flip();
+	    return buffer;
+	}
+	
+	private static ByteBuffer flipTexBuffer(ByteBuffer input, int width, int height) {
+		ByteBuffer buffer = BufferUtils.createByteBuffer(width * height * 3);
+
+		for (int y = height - 1; y >= 0; y--) {
+		    for (int x = 0; x < width; x++) {
+		        for (int i = 0; i < 3; i++) {
+		            buffer.put(input.get((y * width + x) * 3 + i));
+		        }
+		    }
+		}
+
+		buffer.flip();
+		return buffer;
+	}
+	
+	private static ByteBuffer applyGSTexBuffer(ByteBuffer input, int width, int height) {
+		ByteBuffer buffer = BufferUtils.createByteBuffer(width * height);
+
+		for (int y = 0; y < height; y++) {
+		    for (int x = 0; x < width; x++) {
+		        int sum = 0;
+
+		        for (int i = 0; i < 3; i++) {
+		            sum += input.get((y * width + x) * 3 + i) & 0xFF;
+		        }
+
+		        int average = sum / 3;
+		        buffer.put((byte) average);
+		    }
+		}
+
+		buffer.flip();
+		return buffer;
+	}
+	
+	@Override
 	public void initGui() {
-		this.controlList.clear();
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 72, "Respawn"));
-		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 96, "Title menu"));
-		if(this.mc.session == null) {
-			((GuiButton)this.controlList.get(1)).enabled = false;
-		}
-
-	}
-
-	protected void keyTyped(char c1, int i2) {
-	}
-
-	protected void actionPerformed(GuiButton guiButton1) {
-		if(guiButton1.id == 0) {
-			;
-		}
-
-		if(guiButton1.id == 1) {
-			this.mc.respawn();
-			this.mc.displayGuiScreen((GuiScreen)null);
-		}
-
-		if(guiButton1.id == 2) {
-			this.mc.changeWorld1((World)null);
-			this.mc.displayGuiScreen(new GuiMainMenu());
-		}
-
-	}
-
-	public void drawScreen(int i1, int i2, float f3) {
-		this.drawGradientRect(0, 0, this.width, this.height, 1615855616, -1602211792);
-		GL11.glPushMatrix();
-		GL11.glScalef(2.0F, 2.0F, 2.0F);
-		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 0xFFFFFF);
-		GL11.glPopMatrix();
-		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.getScore(), this.width / 2, 100, 0xFFFFFF);
-		super.drawScreen(i1, i2, f3);
-	}
-
+		if (this.texture != -1) {
+			return;
+		}
+		this.texture = this.mc.renderEngine.getTexture(String.format(
+				"/death/%s.png", this.mc.thePlayer.deathScreen));
+		this.extractDeathMusic();
+		
+		ByteBuffer screenshot = this.mc.entityRenderer.takeDeathScreenshot();
+		screenshot = resizeTexBuffer(screenshot, this.mc.displayWidth, 
+				this.mc.displayHeight, 332, 182);
+		screenshot = flipTexBuffer(screenshot, 332, 182);
+		screenshot = applyGSTexBuffer(screenshot, 332, 182);
+		
+		ByteBuffer altScreenshot = this.mc.entityRenderer.takeAltDeathScreenshot();
+		altScreenshot = resizeTexBuffer(altScreenshot, this.mc.displayWidth, 
+				this.mc.displayHeight, 147, 144);
+		altScreenshot = flipTexBuffer(altScreenshot, 147, 144);
+		altScreenshot = applyGSTexBuffer(altScreenshot, 147, 144);
+		
+		GL11.glEnable(GL11.GL_TEXTURE_2D);
+		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.texture);
+		
+		GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 184, 174, 332, 182, 
+				GL11.GL_LUMINANCE, GL11.GL_UNSIGNED_BYTE, screenshot);
+		GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 191, 372, 147, 144, 
+				GL11.GL_LUMINANCE, GL11.GL_UNSIGNED_BYTE, altScreenshot);
+		
+		GL11.glDisable(GL11.GL_TEXTURE_2D);
+	}
+	
+	@Override
 	public boolean doesGuiPauseGame() {
-		return false;
+		return this.noRenderTicks <= 0;
+	}
+	
+	@Override
+	public void updateScreen() {		
+		if (this.noRenderTicks > 0) {
+			this.noRenderTicks--;
+			return;
+		}
+		
+		if (this.blankScreenTicks > 0) {
+			this.blankScreenTicks--;
+			return;
+		}
+		
+		if (this.scale < SCALE_MAX) {			
+			this.scale += 0.02F;
+		} else if (this.scale > SCALE_MAX) {
+			this.scale = SCALE_MAX;
+		}
+		
+		if (this.rotation > 0.0F && this.rotation - 8.0F > 0.0F) {				
+			this.rotation -= 4.5F;			
+		} else {
+			this.rotation = 0.0F;
+		}
+		
+		if (this.musicPauseTicks > 0) {
+			this.musicPauseTicks--;
+			return;
+		}
+		
+		if (!this.playedMusic) {
+			this.playedMusic = true;
+			this.mc.sndManager.playMusic("random.death", 0.6F, 1.0F);
+		}
+
+		if (this.respawnTicks == -1) {
+			return;
+		}
+		
+		if (this.respawnTicks > 0) {
+			this.respawnTicks--;
+			return;
+		} else {
+			this.mc.displayGuiScreen(null);
+			this.respawnTicks = -1;
+		}
+	}
+	
+	@Override
+	protected void keyTyped(char character, int key) {
+		if (this.respawnTicks != -1 || this.noRenderTicks > 0 || 
+			this.blankScreenTicks > 0 || this.musicPauseTicks > 0) {
+			return;
+		}
+		this.respawnTicks = 25;
+	}
+	
+	@Override
+	public void onGuiClosed() {
+		this.mc.respawn();
+		this.mc.sndManager.stopMusic();
+		if (this.mc.isMultiplayerWorld()) {
+			this.mc.theWorld.sendQuittingDisconnectingPacket();
+		}
+		this.mc.changeWorld1(null);
+	}
+
+	private void drawTexRect(float x, float y, int textureX, int textureY, 
+			float textureScaleX, float textureScaleY, int width, int height) {
+		Tessellator tessellator = Tessellator.instance;
+		tessellator.startDrawingQuads();
+
+		tessellator.addVertexWithUV(x, y + height, this.zLevel, textureX * textureScaleX, (textureY + height) * textureScaleY);
+		tessellator.addVertexWithUV(x + width, y + height, this.zLevel, (textureX + width) * textureScaleX,
+				(textureY + height) * textureScaleY);
+		tessellator.addVertexWithUV(x + width, y, this.zLevel, (textureX + width) * textureScaleX, textureY * textureScaleY);
+		tessellator.addVertexWithUV(x, y, this.zLevel, textureX * textureScaleX, textureY * textureScaleY);
+
+		tessellator.draw();
+	}
+	
+	@Override
+	public void drawScreen(int mouseX, int mouseY, float deltaTime) {
+		if (this.noRenderTicks > 0) {
+			return;
+		}
+	    this.drawRect(0, 0, this.width, this.height, 0xFF000000);
+	    
+	    int scaledWidth = (int) (IMG_WIDTH * this.scale);
+	    int scaledHeight = (int) (IMG_HEIGHT * this.scale);
+	    int x = (int) ((this.width / 2 - scaledWidth / 2) / this.scale);
+	    int y = (int) ((this.height / 2 - scaledHeight / 2) / this.scale);
+
+	    GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.texture);
+	    GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+	    
+	    GL11.glPushMatrix();
+	    GL11.glTranslatef(this.width / 2, this.height / 2, 0.0F);
+	    GL11.glRotatef(this.rotation, 0.0F, 0.0F, 1.0F);
+	    GL11.glTranslatef(-this.width / 2, -this.height / 2, 0.0F);
+	    GL11.glScalef(this.scale, this.scale, 1.0F);
+	    this.drawTexRect(x, y, 0, 0, 1.0F / IMG_WIDTH, 1.0F / IMG_HEIGHT, IMG_WIDTH, IMG_HEIGHT);
+	    GL11.glPopMatrix();
+	    
+	    if (this.respawnTicks == -1) {
+	    	return;
+	    }
+	    
+	    x = this.width / 2;
+	    y = this.height / 2 - 20;
+	    
+	    GL11.glPushMatrix();
+	    GL11.glTranslatef(x, y, 0.0F);
+	    GL11.glRotatef(-35.0F, 0.0F, 0.0F, 1.0F);
+	    GL11.glTranslatef(-x, -y, 0.0F);
+	    this.drawString(this.fontRenderer, "Respawning...", x, y, 0xFF0000);
+	    GL11.glPopMatrix();
 	}
 }
